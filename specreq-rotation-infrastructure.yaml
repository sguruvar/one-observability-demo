AWSTemplateFormatVersion: '2010-09-09'
Description: 'Specreq Queue Rotation Lambda with EventBridge Rule'

Parameters:
  SlackWebhookUrl:
    Type: String
    Description: 'Slack webhook URL for notifications (required)'
    NoEcho: true
  
  SlackChannel:
    Type: String
    Description: 'Slack channel for notifications'
    Default: '#specreq-rotation'
  
  RotationSchedule:
    Type: String
    Description: 'EventBridge schedule expression for rotation (default: every Monday at 9 AM UTC)'
    Default: 'cron(0 9 ? * MON *)'

Resources:
  # IAM Role for Lambda
  SpecreqRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'SpecreqRotationLambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SpecreqRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function
  SpecreqRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'specreq-rotation-lambda'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SpecreqRotationLambdaRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
          SLACK_CHANNEL: !Ref SlackChannel
      Code:
        ZipFile: |
          import json
          import logging
          import os
          import urllib3
          from datetime import datetime, timezone, timedelta
          from typing import Dict, Any, Optional

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Team members in circular rotation order
          TEAM_ROTATION = [
              "@babussr", "@koffir", "@andress", "@achandap", "@ashishmb", 
              "@garrjh", "@jshijj", "@jalioto", "@lvieiras", "@faracm", 
              "@mevelez", "@anaele", "@kurampil", "@aliving", "@vsharmro", 
              "@sasikmal", "@sshasan", "@gurusiva", "@vikrvenk"
          ]

          # Configuration
          SLACK_WEBHOOK_URL = os.environ.get('SLACK_WEBHOOK_URL', '')
          SLACK_CHANNEL = os.environ.get('SLACK_CHANNEL', '#specreq-rotation')

          # Epoch start date for rotation calculation (Sunday, August 17, 2025)
          ROTATION_EPOCH = datetime(2025, 8, 17, tzinfo=timezone.utc)


          def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
              """
              EventBridge triggered Lambda for weekly specreq queue rotation.
              Uses date calculation to determine current assignee (stateless).
              """
              try:
                  logger.info("üîÑ Starting specreq queue weekly rotation")
                  
                  # Calculate current and previous assignees based on date
                  current_week_index = get_current_week_index()
                  previous_week_index = get_previous_week_index()
                  
                  current_person = TEAM_ROTATION[current_week_index]
                  previous_person = TEAM_ROTATION[previous_week_index] if previous_week_index != current_week_index else None
                  
                  # Send rotation notification
                  send_rotation_notification(previous_person, current_person, current_week_index)
                  
                  result = {
                      'statusCode': 200,
                      'rotation_completed': True,
                      'previous_assignee': previous_person,
                      'current_assignee': current_person,
                      'rotation_index': current_week_index,
                      'total_team_members': len(TEAM_ROTATION),
                      'week_number': get_weeks_since_epoch(),
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
                  
                  logger.info(f"‚úÖ Rotation: {previous_person} ‚Üí {current_person} (index: {current_week_index})")
                  return result
                  
              except Exception as e:
                  logger.error(f"‚ùå Rotation failed: {str(e)}", exc_info=True)
                  send_error_alert(str(e))
                  
                  return {
                      'statusCode': 500,
                      'rotation_completed': False,
                      'error': str(e),
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }


          def get_weeks_since_epoch() -> int:
              """Calculate number of weeks since rotation epoch."""
              now = datetime.now(timezone.utc)
              delta = now - ROTATION_EPOCH
              return int(delta.days // 7)


          def get_current_week_index() -> int:
              """Get current week's assignee index using date calculation."""
              weeks_since_epoch = get_weeks_since_epoch()
              return weeks_since_epoch % len(TEAM_ROTATION)


          def get_previous_week_index() -> int:
              """Get previous week's assignee index."""
              weeks_since_epoch = get_weeks_since_epoch()
              previous_week = weeks_since_epoch - 1
              return previous_week % len(TEAM_ROTATION) if previous_week >= 0 else (len(TEAM_ROTATION) - 1)


          def send_rotation_notification(previous_person: Optional[str], current_person: str, index: int) -> None:
              """Send Slack notification via webhook."""
              try:
                  if not SLACK_WEBHOOK_URL:
                      logger.warning("‚ö†Ô∏è No SLACK_WEBHOOK_URL configured - printing message instead")
                      now = datetime.now(timezone.utc)
                      week_of = now.strftime('%m/%d')
                      if previous_person and previous_person != current_person:
                          message = f"Thank you {previous_person} for handling the specreq queue last week! This week ({week_of}), {current_person} will be taking care of the specreq queue."
                      else:
                          message = f"This week ({week_of}), {current_person} will be taking care of the specreq queue."
                      print(f"üìß Slack message would be sent: {message}")
                      return

                  now = datetime.now(timezone.utc)
                  week_of = now.strftime('%m/%d')
                  
                  # Build Slack message with rich formatting
                  if previous_person and previous_person != current_person:
                      message_text = f"üîÑ *Specreq Queue Rotation Update*\\n\\nThank you {previous_person} for handling the specreq queue last week!\\n\\nThis week ({week_of}), {current_person} will be taking care of the specreq queue."
                  else:
                      message_text = f"üîÑ *Specreq Queue Assignment*\\n\\nThis week ({week_of}), {current_person} will be taking care of the specreq queue."
                  
                  # Create Slack payload
                  slack_payload = {
                      "channel": SLACK_CHANNEL,
                      "username": "Specreq Rotation Bot",
                      "icon_emoji": ":arrows_counterclockwise:",
                      "text": message_text
                  }
                  
                  # Send to Slack using urllib3
                  http = urllib3.PoolManager()
                  response = http.request(
                      'POST',
                      SLACK_WEBHOOK_URL,
                      body=json.dumps(slack_payload),
                      headers={'Content-Type': 'application/json'}
                  )
                  
                  if response.status == 200:
                      logger.info(f"‚úÖ Slack notification sent: {current_person}")
                  else:
                      logger.error(f"‚ùå Slack webhook failed with status: {response.status}")
                      
              except Exception as e:
                  logger.error(f"‚ùå Failed to send Slack notification: {e}")


          def send_error_alert(error_msg: str) -> None:
              """Send Slack alert when rotation fails."""
              try:
                  if not SLACK_WEBHOOK_URL:
                      logger.warning("‚ö†Ô∏è No SLACK_WEBHOOK_URL configured for error alerts")
                      print(f"üìß Slack error alert would be sent: üö® Specreq queue rotation failed: {error_msg}")
                      return

                  error_message = f"üö® *Specreq Queue Rotation FAILED*\\n\\nError: {error_msg}\\n\\nPlease manually assign someone for this week."
                  
                  slack_payload = {
                      "channel": SLACK_CHANNEL,
                      "username": "Specreq Rotation Bot",
                      "icon_emoji": ":warning:",
                      "text": error_message
                  }
                  
                  http = urllib3.PoolManager()
                  response = http.request(
                      'POST',
                      SLACK_WEBHOOK_URL,
                      body=json.dumps(slack_payload),
                      headers={'Content-Type': 'application/json'}
                  )
                  
                  if response.status == 200:
                      logger.info("‚úÖ Error alert sent to Slack")
                  else:
                      logger.error(f"‚ùå Slack error alert failed with status: {response.status}")
                      
              except Exception as e:
                  logger.error(f"‚ùå Failed to send Slack error alert: {e}")

  # EventBridge Rule for weekly rotation
  SpecreqRotationRule:
    Type: AWS::Events::Rule
    Properties:
      Name: 'specreq-rotation-weekly'
      Description: 'Triggers specreq queue rotation weekly'
      ScheduleExpression: !Ref RotationSchedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt SpecreqRotationLambda.Arn
          Id: 'SpecreqRotationTarget'
          Input: !Sub |
            {
              "source": "eventbridge.rule",
              "detail-type": "Scheduled Event",
              "detail": {
                "rule-name": "specreq-rotation-weekly"
              }
            }

  # Permission for EventBridge to invoke Lambda
  SpecreqRotationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SpecreqRotationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SpecreqRotationRule.Arn

  # CloudWatch Log Group for Lambda
  SpecreqRotationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SpecreqRotationLambda}'
      RetentionInDays: 30

Outputs:
  LambdaFunctionName:
    Description: 'Name of the specreq rotation Lambda function'
    Value: !Ref SpecreqRotationLambda
    Export:
      Name: !Sub '${AWS::StackName}-lambda-function-name'

  LambdaFunctionArn:
    Description: 'ARN of the specreq rotation Lambda function'
    Value: !GetAtt SpecreqRotationLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-lambda-function-arn'

  EventBridgeRuleName:
    Description: 'Name of the EventBridge rule'
    Value: !Ref SpecreqRotationRule
    Export:
      Name: !Sub '${AWS::StackName}-eventbridge-rule-name'

  SlackChannel:
    Description: 'Slack channel for notifications'
    Value: !Ref SlackChannel

  SlackWebhookConfigured:
    Description: 'Whether Slack webhook is configured'
    Value: !If [!Equals [!Ref SlackWebhookUrl, ''], 'No', 'Yes']

  RotationSchedule:
    Description: 'EventBridge schedule expression'
    Value: !Ref RotationSchedule